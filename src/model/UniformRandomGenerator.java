package model;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * Generates a number randomly distributed between 0 and 1 Uses mixed LCG
 * 
 * @author ahmed
 *
 */
public class UniformRandomGenerator
{
	/* fields */
	long a, c, m;
	long x;

	public UniformRandomGenerator()
	{
		// period size = 33554431
		m = 1l << 25;

		// c is generated by system time, and make sure it is odd(relatively
		// prime to m)
		c = System.nanoTime() % m;
		if (c % 2 == 0)
			c--;

		// a = 1 + 4k, k = 10 ^ 8
		a = 1l + 4l * 100000000;

		// seed is generated by system time
		x = System.nanoTime() % m;
	}

	/**
	 * @return the next random number between 0 and 1
	 */
	public double nextRand()
	{
		x = (a * x + c) % m;
		return 1.0 * x / m;
	}

	public GeneratorSpecs getGeneratorSpecs()
	{
		// generate numbers to get in a cycle
		for (long i = 0; i < m; i++)
			nextRand();
		double source = nextRand();

		// go through each number till you find a cycle
		List<Double> l = new ArrayList<>();
		while (true)
		{
			double next = nextRand();
			if (next == source)
				break;
			else
				l.add(next);
		}

		// calculate gap info
		double minGap = m;
		double maxGap = 0;
		double averageGap = 0;
		Collections.sort(l);
		for (int i = 0; i < l.size() - 1; i++)
		{
			double diff = Math.abs(l.get(i) - l.get(i + 1));
			minGap = Math.min(minGap, diff);
			maxGap = Math.max(maxGap, diff);
			averageGap += diff;
		}

		return new GeneratorSpecs(l.size(), minGap, maxGap, averageGap / (l.size() != 0  ? l.size() - 1 : 1));
	}

	/**
	 * 
	 * @param nValues
	 *            number of generated random numbers
	 * @param nPeriods
	 *            the number of ranges (0->0.1, 0.1->0.2)
	 * @return a histogram of values generated
	 */
	public HistoGram getHistogram(long nValues, int nPeriods)
	{
		// generate a few numbers to estimate the min and max
		double min = 0;
		double max = 1;
		for (int i = 0; i < 10000; i++)
		{
			double x = nextRand();
			min = Math.min(min, x);
			max = Math.max(max, x);
		}

		// generate the required amount of numbers and increments their periods
		long count[] = new long[nPeriods];
		for (int i = 0; i < nValues; i++)
		{
			double x = nextRand();
			int periodIdx = (int) Math.floor((x - min) * nPeriods / (max - min));
			if (periodIdx < 0)
				periodIdx = 0;
			if (periodIdx > nPeriods - 1)
				periodIdx = nPeriods - 1;
			count[periodIdx]++;

		}

		// wrap histogram's data
		HistoGram histogram = new HistoGram();
		histogram.setMinValue(min);
		histogram.setMaxValue(max);
		histogram.setnValues(nValues);
		histogram.setnPeriods(nPeriods);
		histogram.setCount(count);
		return histogram;
	}

	public static void main(String[] args)
	{
		UniformRandomGenerator r = new UniformRandomGenerator();
		System.out.println(r.getHistogram(10000, 10));
		System.out.println(r.getGeneratorSpecs());
	}

}
